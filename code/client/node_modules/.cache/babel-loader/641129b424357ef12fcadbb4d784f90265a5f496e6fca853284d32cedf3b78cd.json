{"ast":null,"code":"var _jsxFileName = \"/Users/isobelbarkley/Documents/appeng/COMP0067_2023_Team09/ucl-apps-portal/client/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Select, MenuItem, InputLabel } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = () => {\n  _s();\n  const [textInput, setTextInput] = useState('');\n  const [selectedSortFilter, setSortFilter] = useState(\"\");\n  const handleTextInputChange = event => {\n    setTextInput(event.target.value);\n  };\n  const handleSortChange = event => {\n    setSortFilter(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    style: {\n      marginTop: \"400px\",\n      marginLeft: \"62px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        '& > :not(style)': {\n          m: 1\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'flex-end'\n        },\n        children: [/*#__PURE__*/_jsxDEV(SearchIcon, {\n          sx: {\n            color: 'action.active',\n            mr: 1,\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"search-bar\",\n          label: \"Search by Keyword\",\n          style: {\n            width: 800\n          },\n          variant: \"filled\",\n          value: textInput,\n          onChange: handleTextInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"sort-by\",\n        children: \"Sort by\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"sort-by\",\n        id: \"sort-by\",\n        defaultValue: \"\",\n        style: {\n          width: 330\n        },\n        value: selectedSortFilter,\n        onChange: handleSortChange,\n        children: /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"Apply by\"\n        }, \"apply-by\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n/*\nFirst we create a state to store the text input called textInput and assign it the value ''.\nThen we return a material UI <TextField /> component whose value attribute is set to the textInput state.\nDoing this we display the current value of the textInput in the <TextField />. Any changes to the value of textInput will change the value attribute of the <TextField />,\ncourtesy of React.\nThen we use the onChange attribute of <TextField /> to run a handler function every time the value of the <TextField /> value attribute changes.\nThis handler function is an arrow function stored in the constant handleTextInputChange. It takes an event as an argument.\nWhen the onChange attribute runs the handler function, it sends the event as an argument to the handler function.\nThe value of the <TextField /> is stored in event.target.value. We then use the setTextInput method of the state to set the state to the value attribute of the <TextField />.\nThus this change is reflected in the <TextField /> whose value attribute is the value of the textInput state.\nThus the data input into the <TextField /> is stored in the state textInput, ready to be used when required.\n*/\n_s(Search, \"0q5BuzOHzTMp7SdoMcKeJ1H7DKQ=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","useEffect","Box","TextField","SearchIcon","Select","MenuItem","InputLabel","jsxDEV","_jsxDEV","Search","_s","textInput","setTextInput","selectedSortFilter","setSortFilter","handleTextInputChange","event","target","value","handleSortChange","className","style","marginTop","marginLeft","children","sx","m","display","alignItems","color","mr","my","fileName","_jsxFileName","lineNumber","columnNumber","id","label","width","variant","onChange","labelId","defaultValue","_c","$RefreshReg$"],"sources":["/Users/isobelbarkley/Documents/appeng/COMP0067_2023_Team09/ucl-apps-portal/client/src/components/SearchBar.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport SearchIcon from '@mui/icons-material/Search';\nimport {\n  Select,\n  MenuItem,\n  InputLabel\n} from \"@mui/material\";\n\nconst Search= () => {\n    const [textInput, setTextInput] = useState('');\n    const [selectedSortFilter, setSortFilter] = useState(\"\");\n\n    const handleTextInputChange = event => {\n        setTextInput(event.target.value);\n    };\n\n    const handleSortChange = (event) => {\n      setSortFilter(event.target.value);\n    }\n    \n  return (\n    <div className=\"search\" style={{ marginTop: \"400px\", marginLeft:\"62px\"}}>\n    <Box sx={{ '& > :not(style)': { m: 1 } }}>\n      <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\n        <SearchIcon sx={{ color: 'action.active', mr: 1, my: 2 }} />\n        <TextField id=\"search-bar\" label=\"Search by Keyword\" style={{ width: 800 }} variant=\"filled\" value={textInput} onChange= {handleTextInputChange}/>\n      </Box>\n      <InputLabel id=\"sort-by\">Sort by</InputLabel>\n                <Select\n                  labelId=\"sort-by\"\n                  id=\"sort-by\"\n                  defaultValue=\"\"\n                  style={{ width: 330 }}\n                  value={selectedSortFilter}\n                  onChange={handleSortChange}\n                >\n                  {/* {product.map((productTypeObj, index) => (\n                    <MenuItem key={index} value={productTypeObj.productType}>\n                      {productTypeObj.productType}\n                    </MenuItem>\n                  ))} */}\n                  <MenuItem key=\"apply-by\" value=\"Apply by\"/>\n                </Select>\n    </Box>\n    </div>\n  );\n}\n\n/*\nFirst we create a state to store the text input called textInput and assign it the value ''.\nThen we return a material UI <TextField /> component whose value attribute is set to the textInput state.\nDoing this we display the current value of the textInput in the <TextField />. Any changes to the value of textInput will change the value attribute of the <TextField />,\ncourtesy of React.\nThen we use the onChange attribute of <TextField /> to run a handler function every time the value of the <TextField /> value attribute changes.\nThis handler function is an arrow function stored in the constant handleTextInputChange. It takes an event as an argument.\nWhen the onChange attribute runs the handler function, it sends the event as an argument to the handler function.\nThe value of the <TextField /> is stored in event.target.value. We then use the setTextInput method of the state to set the state to the value attribute of the <TextField />.\nThus this change is reflected in the <TextField /> whose value attribute is the value of the textInput state.\nThus the data input into the <TextField /> is stored in the state textInput, ready to be used when required.\n*/\n\nexport default Search"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SACEC,MAAM,EACNC,QAAQ,EACRC,UAAU,QACL,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,MAAM,GAAEA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,kBAAkB,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMgB,qBAAqB,GAAGC,KAAK,IAAI;IACnCJ,YAAY,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACpC,CAAC;EAED,MAAMC,gBAAgB,GAAIH,KAAK,IAAK;IAClCF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAEH,oBACEV,OAAA;IAAKY,SAAS,EAAC,QAAQ;IAACC,KAAK,EAAE;MAAEC,SAAS,EAAE,OAAO;MAAEC,UAAU,EAAC;IAAM,CAAE;IAAAC,QAAA,eACxEhB,OAAA,CAACP,GAAG;MAACwB,EAAE,EAAE;QAAE,iBAAiB,EAAE;UAAEC,CAAC,EAAE;QAAE;MAAE,CAAE;MAAAF,QAAA,gBACvChB,OAAA,CAACP,GAAG;QAACwB,EAAE,EAAE;UAAEE,OAAO,EAAE,MAAM;UAAEC,UAAU,EAAE;QAAW,CAAE;QAAAJ,QAAA,gBACnDhB,OAAA,CAACL,UAAU;UAACsB,EAAE,EAAE;YAAEI,KAAK,EAAE,eAAe;YAAEC,EAAE,EAAE,CAAC;YAAEC,EAAE,EAAE;UAAE;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,eAC5D3B,OAAA,CAACN,SAAS;UAACkC,EAAE,EAAC,YAAY;UAACC,KAAK,EAAC,mBAAmB;UAAChB,KAAK,EAAE;YAAEiB,KAAK,EAAE;UAAI,CAAE;UAACC,OAAO,EAAC,QAAQ;UAACrB,KAAK,EAAEP,SAAU;UAAC6B,QAAQ,EAAGzB;QAAsB;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9I,eACN3B,OAAA,CAACF,UAAU;QAAC8B,EAAE,EAAC,SAAS;QAAAZ,QAAA,EAAC;MAAO;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAa,eACnC3B,OAAA,CAACJ,MAAM;QACLqC,OAAO,EAAC,SAAS;QACjBL,EAAE,EAAC,SAAS;QACZM,YAAY,EAAC,EAAE;QACfrB,KAAK,EAAE;UAAEiB,KAAK,EAAE;QAAI,CAAE;QACtBpB,KAAK,EAAEL,kBAAmB;QAC1B2B,QAAQ,EAAErB,gBAAiB;QAAAK,QAAA,eAO3BhB,OAAA,CAACH,QAAQ;UAAgBa,KAAK,EAAC;QAAU,GAA3B,UAAU;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAmB;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACpC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACf;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXAzB,EAAA,CAxCMD,MAAM;AAAAkC,EAAA,GAANlC,MAAM;AAqDZ,eAAeA,MAAM;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}