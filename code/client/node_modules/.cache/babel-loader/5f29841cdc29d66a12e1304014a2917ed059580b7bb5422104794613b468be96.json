{"ast":null,"code":"import{useLocation,Navigate,Outlet}from\"react-router-dom\";import useAuth from\"../hooks/useAuth\";import{jsx as _jsx}from\"react/jsx-runtime\";var RequireAuth=function RequireAuth(_ref){var _auth$roles;var allowedRoles=_ref.allowedRoles;var _useAuth=useAuth(),auth=_useAuth.auth;var location=useLocation();// Outlet here represents any child components of RequireAuth\nreturn(// If the auth roles array matches the allowed roles, return the outlet, else:\n// (if the user is logged in, navigate to forbidden else, navigate to unauthorised page)\nauth!==null&&auth!==void 0&&(_auth$roles=auth.roles)!==null&&_auth$roles!==void 0&&_auth$roles.find(function(role){return allowedRoles.includes(role);})?/*#__PURE__*/_jsx(Outlet,{}):auth!==null&&auth!==void 0&&auth.user?/*#__PURE__*/_jsx(Navigate,{to:\"/Forbidden\",state:{from:location},replace:true}):/*#__PURE__*/_jsx(Navigate,{to:\"/Unauthorised\",state:{from:location},replace:true})// Navigate to homepage and set \"from\" to current location (protected route user is trying to access)\n// replace current location in history stack so user can't go back to protected route without logging in\n);};export default RequireAuth;","map":{"version":3,"names":["useLocation","Navigate","Outlet","useAuth","jsx","_jsx","RequireAuth","_ref","_auth$roles","allowedRoles","_useAuth","auth","location","roles","find","role","includes","user","to","state","from","replace"],"sources":["/Users/isobelbarkley/Documents/appeng/COMP0067_2023_Team09/ucl-apps-portal/client/src/components/RequireAuth.js"],"sourcesContent":["import { useLocation, Navigate, Outlet } from \"react-router-dom\";\nimport useAuth from \"../hooks/useAuth\";\n\nconst RequireAuth = ({ allowedRoles }) => {\n  const { auth } = useAuth();\n  const location = useLocation();\n\n  // Outlet here represents any child components of RequireAuth\n  return (\n    // If the auth roles array matches the allowed roles, return the outlet, else:\n    // (if the user is logged in, navigate to forbidden else, navigate to unauthorised page)\n    auth?.roles?.find((role) => allowedRoles.includes(role)) ? (\n      <Outlet />\n    ) : auth?.user ? (\n      <Navigate to=\"/Forbidden\" state={{ from: location }} replace />\n    ) : (\n      <Navigate to=\"/Unauthorised\" state={{ from: location }} replace />\n    )\n    // Navigate to homepage and set \"from\" to current location (protected route user is trying to access)\n    // replace current location in history stack so user can't go back to protected route without logging in\n  );\n};\n\nexport default RequireAuth;\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,kBAAkB,CAChE,MAAO,CAAAC,OAAO,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvC,GAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAAC,IAAA,CAAyB,KAAAC,WAAA,IAAnB,CAAAC,YAAY,CAAAF,IAAA,CAAZE,YAAY,CACjC,IAAAC,QAAA,CAAiBP,OAAO,EAAE,CAAlBQ,IAAI,CAAAD,QAAA,CAAJC,IAAI,CACZ,GAAM,CAAAC,QAAQ,CAAGZ,WAAW,EAAE,CAE9B;AACA,MACE;AACA;AACAW,IAAI,SAAJA,IAAI,YAAAH,WAAA,CAAJG,IAAI,CAAEE,KAAK,UAAAL,WAAA,WAAXA,WAAA,CAAaM,IAAI,CAAC,SAACC,IAAI,QAAK,CAAAN,YAAY,CAACO,QAAQ,CAACD,IAAI,CAAC,GAAC,cACtDV,IAAA,CAACH,MAAM,IAAG,CACRS,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAEM,IAAI,cACZZ,IAAA,CAACJ,QAAQ,EAACiB,EAAE,CAAC,YAAY,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAER,QAAS,CAAE,CAACS,OAAO,OAAG,cAE/DhB,IAAA,CAACJ,QAAQ,EAACiB,EAAE,CAAC,eAAe,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAER,QAAS,CAAE,CAACS,OAAO,OAEjE;AACA;AAAA,EAEJ,CAAC,CAED,cAAe,CAAAf,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}