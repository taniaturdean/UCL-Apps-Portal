{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Select, MenuItem, InputLabel, FormControl } from \"@mui/material\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const FilterBy = (props) => {\n//   const navigate = useNavigate();\n\n//   // arrays from DB\n//   const [sectors, setSectors] = useState([]);\n//   const [productTypes, setProductTypes] = useState([]);\n//   const [opportunityTypes, setOpportunityTypes] = useState([]);\n\n//   // selected form options\n//   const [selectedSector, setSelectedSector] = useState(\"\");\n//   const [selectedProduct, setSelectedProduct] = useState(\"\");\n//   const [selectedOppType, setSelectedOppType] = useState(\"\");\n\n//   // event handlers\n//   const handleSectorChange = (event) => {\n//     setSelectedSector(event.target.value);\n//   };\n//   const handleProductChange = (event) => {\n//     setSelectedProduct(event.target.value);\n//   };\n//   const handleOppTypeChange = (event) => {\n//     setSelectedOppType(event.target.value);\n//   };\n\n//   useEffect(async () => {\n//     //get sectors for dropdown\n//     axios\n//       .get(`http://localhost:5500/form-options/sectors`)\n//       .then(async (response) => {\n//         if (response.data.auth === false) {\n//           // if jwt has expired\n//           navigate(\"/expired\");\n//         }\n//         setSectors(await response.data);\n//         console.log(sectors);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n\n//     // get second drop-down depending on page\n//     const endpoint = {\n//         \"project-connect\": \"opportunity-types\",\n//         \"past-projects\": \"product-types\",\n//         \"available-tech\": \"product-types\"\n//     }\n\n//     axios\n//         .get(`http://localhost:5500/form-options/${endpoint[props.page]}`)\n//         .then((response) => {\n//           if (response.data.auth === false) {\n//             // if jwt has expired\n//             navigate(\"/expired\");\n//           }\n//           else if (props.page === \"project-connect\") {\n//             setOpportunityTypes(response.data)\n//           } else {\n//             setProductTypes(response.data)\n//           }\n//         })\n//         .catch((error) => {\n//           console.log(error);\n//         });\n\n//   }, [navigate]);\n\n//   // ternary operator returning different menu items depending on the page prop\n//   return (\n//     <div>\n//       <FormControl\n//         sx={{\n//           borderRadius: \"15px\",\n//           \"& .MuiOutlinedInput-root\": {\n//             borderRadius: \"20px\",\n//             \"& fieldset\": {\n//               borderColor: \"transparent\",\n//             },\n//             \"&:hover fieldset\": {\n//               borderColor: \"transparent\",\n//             },\n//             \"&.Mui-focused fieldset\": {\n//               borderColor: \"transparent\",\n//             },\n//           },\n//           backgroundColor: \"white\",\n//         }}\n//         required=\"required\"\n//       >\n//         <InputLabel id=\"sector-label\">Select Sector</InputLabel>\n//         <Select\n//           labelId=\"sector-label\"\n//           id=\"sector-select\"\n//           defaultValue=\"\"\n//           style={{ width: 330 }}\n//           value={selectedSector}\n//           onChange={handleSectorChange}\n//         >\n//           {sectors.map((sectorObj, index) => (\n//             <MenuItem key={index} value={sectorObj.sector}>\n//               {sectorObj.sector}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       {props.page === \"project-connect\" ? (\n//         <FormControl\n//           sx={{\n//             left: 40,\n//             borderRadius: \"15px\",\n//             \"& .MuiOutlinedInput-root\": {\n//               borderRadius: \"20px\",\n//               \"& fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&:hover fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&.Mui-focused fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//             },\n//             backgroundColor: \"white\",\n//           }}\n//           required=\"required\"\n//         >\n//           <InputLabel id=\"opp-type-label\">Select Opportunity Type</InputLabel>\n//           <Select\n//             labelId=\"opp-type-label\"\n//             id=\"opp-type-select\"\n//             defaultValue=\"\"\n//             style={{ width: 330 }}\n//             value={selectedOppType}\n//             onChange={handleOppTypeChange}\n//           >\n//             {opportunityTypes.map((opportunityTypeObj, index) => (\n//               <MenuItem key={index} value={opportunityTypeObj.opportunityType}>\n//                 {opportunityTypeObj.opportunityType}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//       ) : (\n//         <FormControl\n//           sx={{\n//             left: 40,\n//             borderRadius: \"15px\",\n//             \"& .MuiOutlinedInput-root\": {\n//               borderRadius: \"20px\",\n//               \"& fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&:hover fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&.Mui-focused fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//             },\n//             backgroundColor: \"white\",\n//           }}\n//           required=\"required\"\n//         >\n//           <InputLabel id=\"product-label\">Select Product Type</InputLabel>\n//           <Select\n//             labelId=\"product-label\"\n//             id=\"product-select\"\n//             defaultValue=\"\"\n//             style={{ width: 330 }}\n//             value={selectedProduct}\n//             onChange={handleProductChange}\n//           >\n//             {productTypes.map((productTypeObj, index) => (\n//               <MenuItem key={index} value={productTypeObj.productType}>\n//                 {productTypeObj.productType}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FilterBy;","map":{"version":3,"names":[],"sources":["/Users/isobelbarkley/Documents/appeng/COMP0067_2023_Team09/ucl-apps-portal/client/src/components/FilterBy.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { Select, MenuItem, InputLabel, FormControl } from \"@mui/material\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const FilterBy = (props) => {\n//   const navigate = useNavigate();\n\n//   // arrays from DB\n//   const [sectors, setSectors] = useState([]);\n//   const [productTypes, setProductTypes] = useState([]);\n//   const [opportunityTypes, setOpportunityTypes] = useState([]);\n\n//   // selected form options\n//   const [selectedSector, setSelectedSector] = useState(\"\");\n//   const [selectedProduct, setSelectedProduct] = useState(\"\");\n//   const [selectedOppType, setSelectedOppType] = useState(\"\");\n\n//   // event handlers\n//   const handleSectorChange = (event) => {\n//     setSelectedSector(event.target.value);\n//   };\n//   const handleProductChange = (event) => {\n//     setSelectedProduct(event.target.value);\n//   };\n//   const handleOppTypeChange = (event) => {\n//     setSelectedOppType(event.target.value);\n//   };\n\n//   useEffect(async () => {\n//     //get sectors for dropdown\n//     axios\n//       .get(`http://localhost:5500/form-options/sectors`)\n//       .then(async (response) => {\n//         if (response.data.auth === false) {\n//           // if jwt has expired\n//           navigate(\"/expired\");\n//         }\n//         setSectors(await response.data);\n//         console.log(sectors);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n    \n//     // get second drop-down depending on page\n//     const endpoint = {\n//         \"project-connect\": \"opportunity-types\",\n//         \"past-projects\": \"product-types\",\n//         \"available-tech\": \"product-types\"\n//     }\n\n//     axios\n//         .get(`http://localhost:5500/form-options/${endpoint[props.page]}`)\n//         .then((response) => {\n//           if (response.data.auth === false) {\n//             // if jwt has expired\n//             navigate(\"/expired\");\n//           }\n//           else if (props.page === \"project-connect\") {\n//             setOpportunityTypes(response.data)\n//           } else {\n//             setProductTypes(response.data)\n//           }\n//         })\n//         .catch((error) => {\n//           console.log(error);\n//         });\n\n//   }, [navigate]);\n\n//   // ternary operator returning different menu items depending on the page prop\n//   return (\n//     <div>\n//       <FormControl\n//         sx={{\n//           borderRadius: \"15px\",\n//           \"& .MuiOutlinedInput-root\": {\n//             borderRadius: \"20px\",\n//             \"& fieldset\": {\n//               borderColor: \"transparent\",\n//             },\n//             \"&:hover fieldset\": {\n//               borderColor: \"transparent\",\n//             },\n//             \"&.Mui-focused fieldset\": {\n//               borderColor: \"transparent\",\n//             },\n//           },\n//           backgroundColor: \"white\",\n//         }}\n//         required=\"required\"\n//       >\n//         <InputLabel id=\"sector-label\">Select Sector</InputLabel>\n//         <Select\n//           labelId=\"sector-label\"\n//           id=\"sector-select\"\n//           defaultValue=\"\"\n//           style={{ width: 330 }}\n//           value={selectedSector}\n//           onChange={handleSectorChange}\n//         >\n//           {sectors.map((sectorObj, index) => (\n//             <MenuItem key={index} value={sectorObj.sector}>\n//               {sectorObj.sector}\n//             </MenuItem>\n//           ))}\n//         </Select>\n//       </FormControl>\n//       {props.page === \"project-connect\" ? (\n//         <FormControl\n//           sx={{\n//             left: 40,\n//             borderRadius: \"15px\",\n//             \"& .MuiOutlinedInput-root\": {\n//               borderRadius: \"20px\",\n//               \"& fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&:hover fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&.Mui-focused fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//             },\n//             backgroundColor: \"white\",\n//           }}\n//           required=\"required\"\n//         >\n//           <InputLabel id=\"opp-type-label\">Select Opportunity Type</InputLabel>\n//           <Select\n//             labelId=\"opp-type-label\"\n//             id=\"opp-type-select\"\n//             defaultValue=\"\"\n//             style={{ width: 330 }}\n//             value={selectedOppType}\n//             onChange={handleOppTypeChange}\n//           >\n//             {opportunityTypes.map((opportunityTypeObj, index) => (\n//               <MenuItem key={index} value={opportunityTypeObj.opportunityType}>\n//                 {opportunityTypeObj.opportunityType}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//       ) : (\n//         <FormControl\n//           sx={{\n//             left: 40,\n//             borderRadius: \"15px\",\n//             \"& .MuiOutlinedInput-root\": {\n//               borderRadius: \"20px\",\n//               \"& fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&:hover fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//               \"&.Mui-focused fieldset\": {\n//                 borderColor: \"transparent\",\n//               },\n//             },\n//             backgroundColor: \"white\",\n//           }}\n//           required=\"required\"\n//         >\n//           <InputLabel id=\"product-label\">Select Product Type</InputLabel>\n//           <Select\n//             labelId=\"product-label\"\n//             id=\"product-select\"\n//             defaultValue=\"\"\n//             style={{ width: 330 }}\n//             value={selectedProduct}\n//             onChange={handleProductChange}\n//           >\n//             {productTypes.map((productTypeObj, index) => (\n//               <MenuItem key={index} value={productTypeObj.productType}>\n//                 {productTypeObj.productType}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FilterBy;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}